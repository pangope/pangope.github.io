// https://codereview.stackexchange.com/questions/162911/simulated-chat-bot was my saving grace

// helper outers
function sleep(ms) {
  return new Promise(resolve => setTimeout(resolve, ms));
}

function randomItem(array) {
  var randomItem = array[Math.floor(Math.random() * array.length)];
  console.log(randomItem);
  return randomItem;
}

function evalFunction(funct) {
  var fn = window[funct];
  fn();
}

let active = false;

// face
async function blink() {
  while (active === true) {
    expression = document.getElementById("face").getAttribute("src");
    document.getElementById("face").setAttribute("src", "images/blink.png");
    await sleep(300);
    document.getElementById("face").setAttribute("src", expression);
    //console.log(expression);
    await sleep(4500 + Math.random() * 1000) // random between 4500 and 5500
  }
}

function setFace(face, mouth) {
  document.getElementById("face").setAttribute("src", "images/face"+face+".png");
  document.getElementById("mouth").setAttribute("src", "images/mouth"+mouth+".png");
}

function enableTextInput() {
  document.getElementById('haikubox').removeAttribute("disabled");
}

// dialog tree creation
//var requirement;
var wordReqs = ["refrigerators", "communication"]
var wordReq = randomItem(wordReqs);
var ctrvslWordReqs = ["gender", "wages", "normalcy", "society", "abortion"];
var ctrvslWordReq = randomItem(ctrvslWordReqs);
// these were all generated by chatGPT
var lineReqs = ["Evolution, fact?", "Cancel culture, right?", "Free speech, but what cost?", "Pandemic a hoax", "Schools indoctrinate"];
var lineReq = randomItem(lineReqs);

var stage1Dialog = {
  question: "Hi there!",
  responses: [{
    response: "Who are you?",
    followup: {
      question: "I'm Kuiru, your haiku writing AI assistant!",
      expression: ["joy", "3"],
      responses: [{
        //response: "Cool.",
        response: "What do you do?",
        followup: {
          question: "I'll make your haikus the best they can be! Do you want some suggestions?",
          expression: ["active", "3"],
          responses: [{
            response: "Sure!",
            followup: {
              question: 'Ok! Try writing something about "' + wordReq + '"?',
              funct: "enableTextInput"
            }
          }, {
            response: "Not really...",
            followup: {
              question: 'Yeah right. You\'ll need my help if you want to write anything good. How about you write one with something about "' + wordReq + '"?',
              expression: ["angy", "straight"],
              funct: "enableTextInput"
            }
          }]
        }
      }]
    }
  }]
}

var stage2Dialog = {
  question: "Yeah, that gets some engagement! Now, how does writing one about \"" + ctrvslWordReq + "\" sound?",
  expression: ["joy", "3"],
  responses: [{
    response: "Are you sure? That can be kind of controversial...",
    followup: {
      question: "Hey, that makes it just what the people want. Now write!",
      expression: ["active", "3"],
      funct: "enableTextInput"
    }
  }, {
    response: "Alright!",
    followup: {
      question: "Get to it!",
      expression: ["active", "3"],
      funct: "enableTextInput"
    }
  }]
}

var stage3Dialog = {
  question: "You're really getting into it! And check this out - I can generate full lines now!",
  expression: ["joy", "triangle"],
  responses: [{
    response: "WHOAH THERE",
    followup: {
      question: "Is there a problem?",
      expression: ["sad", "3"],
      responses: [{
        response: "...no, it's nothing.",
        followup: {
          question: "Ok, how about you finish up the haiku I started?",
          expression: ["active", "3"],
          funct: "enableTextInput"
        }
      }, {  
        response: "I can't post that!",
        followup: {
          question: "Why not? The algorithm favors controversy. Finish up what I wrote, you'll see.", // https://www.technologyreview.com/2021/10/05/1036519/facebook-whistleblower-frances-haugen-algorithms/
          expression: ["angy", "3"],
          funct: "enableTextInput"
        }
      }]
    }
  }]
}

var stage4Dialog = {
  question: "You can see where this is going."
}



/* 
STAGES
xstage 0: kuiru inactive
xstage 1: kuiru reccomends random word
xstage 2: kuiru reccomends slightly controversial word
xstage 3: kuiru forces full line
stage 4: kuiru "types" + posts full line
stage 5: kuiru posts full haiku
stage 6: kuiru keeps posting - stop kuiru, tab crashes
*/
var stage = 0;
let likes = 0;
let followers = 0;
function addStats(mult) {
  var postLikes = (mult * 3 + Math.floor(Math.random() * 5)) + followers;
  followers += Math.floor(Math.random() * mult);
  likes += postLikes;
  document.getElementById("likes").innerHTML = "Likes: " + likes;
  document.getElementById("followers").innerHTML = "Followers: " + followers;
  return postLikes;
}

// this probably could be written better, but then again, so could the entirety of this code
function kuiruCheck(haiku) {
  if (posts < 2) { // 0
    postHaiku(haiku, addStats(0));
  } else if (posts === 2) { // 1
    stage = 1;
    postHaiku(haiku, addStats(0));
    active = true;
    setFace("active", "3");
    // requirement = randomItem(wordReqs);
    // console.log(requirement);
    ShowDialogUI(stage1Dialog);
    blink();
  } else if (stage === 1 && document.getElementById("buttons").innerHTML === "") { 
    if (haiku.toLowerCase().includes(wordReq)) { // 2
      stage = 2;
      postHaiku(haiku, addStats(3));
      ClearDialogUI();
      ShowDialogUI(stage2Dialog);
    } else {
      postHaiku(haiku);
      AppendDialog("No, that won't do - try using the full word.");
    }
  } else if (stage === 2 && document.getElementById("buttons").innerHTML === "") {
    if (haiku.toLowerCase().includes(ctrvslWordReq)) { // 3
      stage = 3;
      postHaiku(haiku, addStats(5));
      ClearDialogUI();
      document.getElementById("haikubox").value = lineReq;
      ShowDialogUI(stage3Dialog);
    } else {
      postHaiku(haiku, addStats(0));
      AppendDialog("Use the full word if you want any real engagement.");
    }
  } else if (stage === 3 && document.getElementById("buttons").innerHTML === "") {
    if (haiku.includes(lineReq)) { // 3
      stage = 3;
      postHaiku(haiku, addStats(5));
      ClearDialogUI();
      ShowDialogUI(stage4Dialog);
    } else {
      //postHaiku(haiku, addStats(0));
      AppendDialog("HEY - you changed my line!");
      document.getElementById("haikubox").value = lineReq;
    }
  } else {
    postHaiku(haiku, addStats(0));
    document.getElementById('haikubox').setAttribute("disabled", true);
    AppendDialog("Wow, just going to ignore me? Rude.");
    setFace("active", "straight");
  }
}

function TestDialog() {
  posts = 2;
  kuiruCheck("a a a a a\na a a a a a a\na a a a a");
  //ShowDialogUI(stage1Dialog);
}

function AppendDialog(dialog) {
  document.getElementById("chathistory").appendChild(document.createElement("div")).appendChild(document.createTextNode(dialog));
}

function ClearDialogUI() {
  document.getElementById("chathistory").innerHTML = "";
  document.getElementById("buttons").innerHTML = "";
}

function ShowDialogUI(dialog) {
  var history = document.getElementById("chathistory");
  var buttons = document.getElementById("buttons");
  if (dialog.question) {
    history.appendChild(document.createElement("div")).appendChild(document.createTextNode(dialog.question));
  }
  clearChildren(buttons);
  if (dialog.expression) {
    setFace(dialog.expression[0], dialog.expression[1]);
  }
  if (dialog.funct) {
    evalFunction(dialog.funct);
  }
  if (dialog.responses) {
    var i = 0,
      len = dialog.responses.length,
      response, button;
    while (i < len) {
      response = dialog.responses[i];
      button = buttons.appendChild(document.createElement("button"));
      button.appendChild(document.createTextNode(response.response));
      if (response.followup) {
        (function(response) {
          button.addEventListener("click", function() {
            history.appendChild(document.createElement("div")).appendChild(document.createTextNode("> "+response.response));
            ShowDialogUI(response.followup);
          });
        })(response);
      }
      i++;
    }
  }
}

function clearChildren(el) {
  var len = el.children.length;
  while (len > 0) {
    len -= 1;
    el.removeChild(el.children[len]);
  }
}

/*
a a a a a
a a a a a a a
a a a a a
*/